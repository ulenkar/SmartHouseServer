/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import model.HibernateUtil;
import model.PomiarGniazdko;
import model.PomiarTemperatura;
import model.ProducentPomiarowNew;
import model.Sprzet;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import tcp_server.SocketServer;

/**
 *
 * @author Ulka
 */
public class UrzadzeniaForm1 extends javax.swing.JFrame {

    private static final String QUERY_WYLACZONY = "from Sprzet where czy_Wlaczony= 1 and sprzet_Id = ";
    private Timer timer;
    private final int MY_TIME = 3000; //trzy sekundy
    private ProducentPomiarowNew producent;
    private Vector<Object> tempTableHeaders;
    private Vector tempTableData;
    private Vector<Object> gniazdkaTableHeaders;
    private Vector gniazdkaTableData;
    private Session session;
    private ArrayList<Sprzet> czujniki;
    private ArrayList<Sprzet> gniazdka;
    private Thread t;
    private boolean serverRunning = true;

    /**
     * Creates new form UrzadzeniaForm
     */
    public UrzadzeniaForm1() {
        initComponents();
        session = HibernateUtil.getSessionFactory().openSession();
        producent = new ProducentPomiarowNew();
        czujniki = producent.getCzujniki();
        gniazdka = producent.getGniazdka();
        loadDisplay();
        wyswietlPomiary();
        wlaczTimer();
        startServer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tempTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        gniazdkaTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jButton3.setText("Historia komunikatów");

        jButton4.setText("Dodaj");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 500));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Aktualny stan urządzeń:");

        tempTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Opis", "Włączony", "Temperatura"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tempTable);
        if (tempTable.getColumnModel().getColumnCount() > 0) {
            tempTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Czujniki temperatury:");

        gniazdkaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Opis", "Włączony", "Napiecie", "Prąd", "Moc"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(gniazdkaTable);
        if (gniazdkaTable.getColumnModel().getColumnCount() > 0) {
            gniazdkaTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Gniazdka elektryczne:");

        jButton1.setText("Dodaj");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Historia komunikatów");

        jButton5.setText("Historia komunikatów");

        jButton6.setText("Dodaj");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)))
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton6)
                        .addComponent(jButton5))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        session.close();
        serverRunning = false;
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UrzadzeniaForm1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UrzadzeniaForm1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UrzadzeniaForm1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UrzadzeniaForm1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UrzadzeniaForm1().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable gniazdkaTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tempTable;
    // End of variables declaration//GEN-END:variables

    private void loadDisplay() {
        tempTableHeaders = new Vector<>();
        tempTableData = new Vector();
        tempTableHeaders.add("ID");
        tempTableHeaders.add("Opis");
        tempTableHeaders.add("Włączony");
        tempTableHeaders.add("Temperatura");
        tempTable.setModel(new DefaultTableModel(tempTableData, tempTableHeaders));

        gniazdkaTableHeaders = new Vector<>();
        gniazdkaTableData = new Vector();
        gniazdkaTableHeaders.add("ID");
        gniazdkaTableHeaders.add("Opis");
        gniazdkaTableHeaders.add("Włączony");
        gniazdkaTableHeaders.add("Napięcie");
        gniazdkaTableHeaders.add("Prąd");
        gniazdkaTableHeaders.add("Moc");
        gniazdkaTable.setModel(new DefaultTableModel(gniazdkaTableData, gniazdkaTableHeaders));

        //produkujPomiary();
    }

    private void wyswietlPomiary() {
        tempTableData = new Vector();
        
        for (Sprzet s : czujniki) {
            List sprzet = HibernateUtil.executeHQLListQuery(session, QUERY_WYLACZONY + s.getSprzetId());
            Vector<Object> oneRow = new Vector<>();
            oneRow.add(s.getSprzetId());
            oneRow.add(s.getOpis());
            if (sprzet.isEmpty()) {
                oneRow.add(false);
                System.out.println("Wylaczony czujnik temp!!!");
                oneRow.add("");
                //wysłać informację do czujnika??
            } else {
                oneRow.add(true);
                String pomiar = producent.findOstatniPomiarTempFor(s.getSprzetId());
                oneRow.add(pomiar);
            }
            tempTableData.add(oneRow);
        }
        DefaultTableModel tempTableModel = new DefaultTableModel(tempTableData, tempTableHeaders) {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        tempTable.setModel(tempTableModel);
        tempTable.getColumnModel().getColumn(0).setPreferredWidth(5);
        tempTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        TableCellRenderer cellRenderer = tempTable.getDefaultRenderer(Boolean.class);
        tempTable.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);
        tempTable.getColumnModel().getColumn(2).setPreferredWidth(40);
        tempTable.getColumnModel().getColumn(3).setPreferredWidth(50);

        
        gniazdkaTableData = new Vector();
        for (Sprzet s : gniazdka) {
            List sprzet2 = HibernateUtil.executeHQLListQuery(session, QUERY_WYLACZONY + s.getSprzetId());
            Vector<Object> oneRow = new Vector<>();
            oneRow.add(s.getSprzetId());
            oneRow.add(s.getOpis());
            if (sprzet2.isEmpty()) {
                oneRow.add(false);
                oneRow.add("");
                oneRow.add("");
                oneRow.add("");
            } else {
                oneRow.add(true);
                oneRow.add("0.0");
                oneRow.add("0.0");
                oneRow.add("0.0");
            }
            gniazdkaTableData.add(oneRow);
        }
        DefaultTableModel gniazdkaTableModel = new DefaultTableModel(gniazdkaTableData, gniazdkaTableHeaders) {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        gniazdkaTable.setModel(gniazdkaTableModel);
        gniazdkaTable.getColumnModel().getColumn(0).setPreferredWidth(5);
        gniazdkaTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        gniazdkaTable.getColumnModel().getColumn(2).setPreferredWidth(40);
        TableCellRenderer cellRenderer2 = gniazdkaTable.getDefaultRenderer(Boolean.class);
        gniazdkaTable.getColumnModel().getColumn(2).setCellRenderer(cellRenderer2);
        gniazdkaTable.getColumnModel().getColumn(3).setPreferredWidth(40);
        gniazdkaTable.getColumnModel().getColumn(4).setPreferredWidth(30);
        gniazdkaTable.getColumnModel().getColumn(5).setPreferredWidth(40);
    }

    private void wlaczTimer() {
        timer = new Timer(MY_TIME, (ActionEvent e) -> {
            //tutaj odświerzanie danych dot. włączenia - wyłączenia
            wyswietlPomiary();
        });
        timer.start();
    }

    private void startServer() {
        Thread t = null;
        try {
            t = new SocketServer(3333, serverRunning);
        } catch (IOException ex) {
            Logger.getLogger(UrzadzeniaForm1.class.getName()).log(Level.SEVERE, null, ex);
        }
        t.start();
    }

}
