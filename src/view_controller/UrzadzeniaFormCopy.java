/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view_controller;

import java.awt.event.ActionEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import model.HibernateUtil;
import model.PomiarGniazdko;
import model.Menadzer;
import model.Sprzet;
import org.hibernate.Session;
import tcp_server.SocketServer;

/**
 *
 * @author Ulka
 */
public class UrzadzeniaFormCopy extends javax.swing.JFrame {

    private static UrzadzeniaFormCopy instance = null;
    private static final String QUERY_WYLACZONY = "from Sprzet where czy_Wlaczony= 1 and sprzet_Id = ";
    private Timer timer;
    private int MY_TIME = 20000; //trzy sekundy
    private final Menadzer menadzer;
    private Object[] tempTableHeaders;
    private Object[][] tempTableData;
    private Object[] gniazdkaTableHeaders;
    private Object[][] gniazdkaTableData;
    private ArrayList<Sprzet> czujniki;
    private ArrayList<Sprzet> gniazdka;

    /**
     * Creates new form UrzadzeniaForm
     */
    UrzadzeniaFormCopy() {
        initComponents();
        menadzer = Menadzer.getInstance();
        czujniki = menadzer.getCzujniki();
        gniazdka = menadzer.getGniazdka();
        loadDisplay();
        wyswietlPomiary();
        wlaczTimer();
    }
    
    public static UrzadzeniaFormCopy getInstance() {
        if (instance == null) {
            instance = new UrzadzeniaFormCopy();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tempTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        gniazdkaTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        dodajCzujnik = new javax.swing.JButton();
        dodajGniazdko = new javax.swing.JButton();
        usunCzujnik = new javax.swing.JButton();
        usunGniazdko = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        interwal = new javax.swing.JTextField();
        ustaw = new javax.swing.JButton();
        intInfo = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jButton3.setText("Historia komunikatów");

        jButton4.setText("Dodaj");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 500));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Aktualny stan urządzeń:");

        tempTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Opis", "Włączony", "Temperatura"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tempTable);
        if (tempTable.getColumnModel().getColumnCount() > 0) {
            tempTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Czujniki temperatury:");

        gniazdkaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Opis", "Włączony", "Napiecie", "Prąd", "Moc"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(gniazdkaTable);
        if (gniazdkaTable.getColumnModel().getColumnCount() > 0) {
            gniazdkaTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Gniazdka elektryczne:");

        dodajCzujnik.setText("Dodaj");
        dodajCzujnik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajCzujnikActionPerformed(evt);
            }
        });

        dodajGniazdko.setText("Dodaj");
        dodajGniazdko.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajGniazdkoActionPerformed(evt);
            }
        });

        usunCzujnik.setText("Usuń");
        usunCzujnik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usunCzujnikActionPerformed(evt);
            }
        });

        usunGniazdko.setText("Usuń");
        usunGniazdko.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usunGniazdkoActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Interwał odświeżania (sek):");

        interwal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        interwal.setText("3");
        interwal.setToolTipText("");

        ustaw.setText("Ustaw");
        ustaw.setToolTipText("");
        ustaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ustawActionPerformed(evt);
            }
        });

        intInfo.setForeground(new java.awt.Color(102, 102, 102));
        intInfo.setText(" ");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dodajCzujnik)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(usunCzujnik))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dodajGniazdko)
                                .addGap(5, 5, 5)
                                .addComponent(usunGniazdko))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(interwal, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ustaw)
                        .addGap(18, 18, 18)
                        .addComponent(intInfo)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dodajGniazdko)
                        .addComponent(usunGniazdko))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dodajCzujnik)
                        .addComponent(usunCzujnik)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(interwal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ustaw)
                    .addComponent(intInfo))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(859, 555));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void dodajCzujnikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajCzujnikActionPerformed
        // TODO add your handling code here:
        new DodajSprzet("czujnik").setVisible(true);
    }//GEN-LAST:event_dodajCzujnikActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void dodajGniazdkoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajGniazdkoActionPerformed
        new DodajSprzet("gniazdko").setVisible(true);
    }//GEN-LAST:event_dodajGniazdkoActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void usunCzujnikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usunCzujnikActionPerformed
        new UsunSprzet("czujnik").setVisible(true);
    }//GEN-LAST:event_usunCzujnikActionPerformed

    private void usunGniazdkoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usunGniazdkoActionPerformed
        new UsunSprzet("gniazdko").setVisible(true);
    }//GEN-LAST:event_usunGniazdkoActionPerformed

    private void ustawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ustawActionPerformed
        MY_TIME =  Integer.parseInt(interwal.getText()) * 1000;
        System.out.println("Nowy interwał: " + MY_TIME);
        timer.stop();
        wlaczTimer();
        intInfo.setText("Ustawiono nowy interwał odświeżania: " + MY_TIME/1000 + " sekund.");
    }//GEN-LAST:event_ustawActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new NewJFrame().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UrzadzeniaFormCopy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UrzadzeniaFormCopy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UrzadzeniaFormCopy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UrzadzeniaFormCopy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UrzadzeniaFormCopy().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dodajCzujnik;
    private javax.swing.JButton dodajGniazdko;
    private javax.swing.JTable gniazdkaTable;
    private javax.swing.JLabel intInfo;
    private javax.swing.JTextField interwal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tempTable;
    private javax.swing.JButton ustaw;
    private javax.swing.JButton usunCzujnik;
    private javax.swing.JButton usunGniazdko;
    // End of variables declaration//GEN-END:variables

    private void loadDisplay() {
        tempTableHeaders = new Object[]{"ID", "Opis", "Włączony", "Temperatura"};
        tempTableData = new Object[100][3];  //wiersze kolumny
        tempTable.setModel(new DefaultTableModel(tempTableData, tempTableHeaders));

        gniazdkaTableHeaders = new Object[]{"ID", "Opis", "Włączony", "Napięcie", "Prąd", "Moc"};
        gniazdkaTableData = new Object[100][3];
        gniazdkaTable.setModel(new DefaultTableModel(gniazdkaTableData, gniazdkaTableHeaders));
    }

    private void wyswietlPomiary() {
        menadzer.refreshSprzet();
        czujniki = menadzer.getCzujniki();
        gniazdka = menadzer.getGniazdka();

        tempTableData = new Object[100][4];

        for (int i=0; i<czujniki.size(); i++) {
            List sprzet = HibernateUtil.executeHQLListQuery(QUERY_WYLACZONY + czujniki.get(i).getSprzetId());
            tempTableData[i][0] = czujniki.get(i).getSprzetId();
            tempTableData[i][1] = czujniki.get(i).getOpis();
            if (sprzet.isEmpty()) {
                tempTableData[i][2] = false;
                System.out.println("Wylaczony czujnik temp!!!");
                tempTableData[i][3] = "";
                //wysłać informację do czujnika??
            } else {
                tempTableData[i][2] = true;
                String pomiar = menadzer.findOstatniPomiarTempFor(czujniki.get(i).getSprzetId());
                tempTableData[i][3] = pomiar;
            }
        }
        
        
        DefaultTableModel tempTableModel = new DefaultTableModel(tempTableData, tempTableHeaders) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 2 && row < czujniki.size()) return true;
                return false;
            }
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return columnIndex == 2 ? Boolean.class : super.getColumnClass(columnIndex);
            }
        };
        tempTable.setModel(tempTableModel);
        tempTable.getColumnModel().getColumn(0).setPreferredWidth(5);
        tempTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        TableCellRenderer cellRenderer = tempTable.getDefaultRenderer(Boolean.class);
        tempTable.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);
        tempTable.getColumnModel().getColumn(2).setPreferredWidth(40);
        tempTable.getColumnModel().getColumn(3).setPreferredWidth(50);
        tempTable.getModel().addTableModelListener(new CheckBoxModelListener());

        //gniazdkaTableData = new Vector();
        for (Sprzet s : gniazdka) {
            List sprzet2 = HibernateUtil.executeHQLListQuery(QUERY_WYLACZONY + s.getSprzetId());
            Vector<Object> oneRow = new Vector<>();
            oneRow.add(s.getSprzetId());
            oneRow.add(s.getOpis());
            if (sprzet2.isEmpty()) {
                oneRow.add(false);
                oneRow.add("");
                oneRow.add("");
                oneRow.add("");
            } else {
                oneRow.add(true);
                PomiarGniazdko pomiar = menadzer.findOstatniPomiarGniazdkoFor(s.getSprzetId());
                if (!(pomiar == null)) {
                    oneRow.add(pomiar.getPomiarNapiecie());
                    oneRow.add(pomiar.getPomiarPrad());
                    oneRow.add(pomiar.getPomiarMoc());
                } else {
                    oneRow.add("");
                    oneRow.add("");
                    oneRow.add("");
                }
            }
            //gniazdkaTableData.add(oneRow);
        }
        
        DefaultTableModel gniazdkaTableModel = new DefaultTableModel(gniazdkaTableData, gniazdkaTableHeaders) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 2) return true;
                return false;
            }
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return columnIndex == 2 ? Boolean.class : super.getColumnClass(columnIndex);
            }
        };
        gniazdkaTable.setModel(gniazdkaTableModel);
        gniazdkaTable.getColumnModel().getColumn(0).setPreferredWidth(5);
        gniazdkaTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        gniazdkaTable.getColumnModel().getColumn(2).setPreferredWidth(40);
        TableCellRenderer cellRenderer2 = gniazdkaTable.getDefaultRenderer(Boolean.class);
        gniazdkaTable.getColumnModel().getColumn(2).setCellRenderer(cellRenderer2);
        gniazdkaTable.getColumnModel().getColumn(3).setPreferredWidth(40);
        gniazdkaTable.getColumnModel().getColumn(4).setPreferredWidth(30);
        gniazdkaTable.getColumnModel().getColumn(5).setPreferredWidth(40);
        gniazdkaTable.getModel().addTableModelListener(new CheckBoxModelListener());
    }

    private void wlaczTimer() {
        timer = new Timer(MY_TIME, (ActionEvent e) -> {
            //tutaj odświerzanie danych dot. włączenia - wyłączenia
            wyswietlPomiary();
        });
        timer.start();
    }
    
    private class CheckBoxModelListener implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent e) {
            int row = e.getFirstRow();
            int column = e.getColumn();
            if (column == 2) {
                TableModel model = (TableModel) e.getSource();
                int id = (int) model.getValueAt(row, 0);
                //String columnName = model.getColumnName(column);
                Boolean checked = (Boolean) model.getValueAt(row, column);
                if (checked) {
                    menadzer.setWlaczSprzet(id, 1); //Wlaczanie
                } else {
                    menadzer.setWlaczSprzet(id, 0); //Wylaczanie
                }
            }
        }
    }

}
